service: product-management
frameworkVersion: '3'

plugins:
  - serverless-bundle
  - serverless-dynamodb
  - serverless-offline

useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  memorySize: 256
  environment:
    PRODUCTS_TABLE_NAME: ${env:PRODUCTS_TABLE_NAME}
    PRODUCTS_BUCKET_NAME: ${self:custom.ProductsBucket.name}
  httpApi:
    cors: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - s3:*
      Resource:
        - ${self:custom.ProductsTable.arn}
        - ${self:custom.ProductsBucket.arn}
        - Fn::Join:
            - ""
            - - ${self:custom.ProductsBucket.arn}
              - "/*"

functions:
  hello:
    handler: src/handlers/index.hello
    events:
      - httpApi:
          method: GET
          path: /

  createProduct:
    handler: src/handlers/index.createProduct
    events:
      - httpApi:
          method: POST
          path: /products

  getAllProducts:
    handler: src/handlers/index.getAllProducts
    events:
      - httpApi:
          method: GET
          path: /products

  deleteProduct:
    handler: src/handlers/index.deleteProduct
    events:
      - httpApi:
          method: DELETE
          path: /products/{id}

  uploadProductImage:
    handler: src/handlers/index.uploadProductImage
    events:
      - httpApi:
          method: PATCH
          path: /products/image

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:PRODUCTS_TABLE_NAME}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    ProductsBucket:
      Type: AWS::S3::Bucket
      Properties:
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        # Set the CORS policy
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
custom:
  ProductsTable:
    name: !Ref ProductsTable
    arn: !GetAtt ProductsTable.Arn
  ProductsBucket:
    name: !Ref ProductsBucket
    arn: !GetAtt ProductsBucket.Arn

  serverless-dynamodb:
    stages:
      - dev
    start:
      port: 7000
      dbPath: ${env:PWD, '.'}/db
      migrate: true
