service: product-management
frameworkVersion: '3'

plugins:
  - serverless-bundle
  - serverless-dynamodb
  - serverless-offline

useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  memorySize: 256
  environment:
    PRODUCTS_TABLE_NAME: ${env:PRODUCTS_TABLE_NAME}
  httpApi:
    cors: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - ${self:custom.ProductsTable.arn}

functions:
  hello:
    handler: src/handlers/index.hello
    events:
      - httpApi:
          method: GET
          path: /

  createProduct:
    handler: src/handlers/index.createProduct
    events:
      - httpApi:
          method: POST
          path: /products

  getAllProducts:
    handler: src/handlers/index.getAllProducts
    events:
      - httpApi:
          method: GET
          path: /products

  deleteProduct:
    handler: src/handlers/index.deleteProduct
    events:
      - httpApi:
          method: DELETE
          path: /products/{id}

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:PRODUCTS_TABLE_NAME}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
custom:
  ProductsTable:
    name: !Ref ProductsTable
    arn: !GetAtt ProductsTable.Arn
  serverless-dynamodb:
    stages:
      - dev
    start:
      port: 7000
      dbPath: ${env:PWD, '.'}/db
      migrate: true
