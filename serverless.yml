service: product-management
frameworkVersion: '3'

plugins:
  - serverless-bundle
  - serverless-dynamodb
  - serverless-offline

useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  memorySize: 256
  environment:
    PRODUCTS_TABLE_NAME: ${self:custom.ProductsTable.name}
    PRODUCTS_BUCKET_NAME: ${self:custom.ProductsBucket.name}
    AUDIT_LOG_TABLE_NAME: ${self:custom.AuditLogTable.name}
    EVENT_BUS_NAME: ${self:custom.ProductEventsBus.name}
  httpApi:
    cors: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - s3:PutObject
        - s3:PutObjectAcl
        - events:PutEvents
      Resource:
        - ${self:custom.ProductsTable.arn}
        - ${self:custom.AuditLogTable.arn}
        - arn:aws:events:*
        - ${self:custom.ProductsBucket.arn}
        - Fn::Join:
            - ""
            - - ${self:custom.ProductsBucket.arn}
              - "/*"

functions:
  - ${file(functions/Products.yml)}
  - ${file(functions/Misc.yml)}

resources:
  Resources:
    ProductsTable: ${file(resources/DynamodbTable.yml):ProductsTable}
    AuditLogTable: ${file(resources/DynamodbTable.yml):AuditLogTable}
    ProductsBucket: ${file(resources/S3Buckets.yml):ProductsBucket}
    ProductEventsBus: ${file(resources/EventBus.yml):ProductEventsBus}

custom:
  ProductsTable:
    name: !Ref ProductsTable
    arn: !GetAtt ProductsTable.Arn
  ProductsBucket:
    name: !Ref ProductsBucket
    arn: !GetAtt ProductsBucket.Arn
  AuditLogTable:
    name: !Ref AuditLogTable
    arn: !GetAtt AuditLogTable.Arn
  ProductEventsBus:
    name: !Ref ProductEventsBus
    arn: !GetAtt ProductEventsBus.Arn
  serverless-dynamodb:
    stages:
      - dev
    start:
      port: 7000
      dbPath: ${env:PWD, '.'}/db
      migrate: true
